@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Routes> Logger
@inject AuthenticationStateProvider AuthStateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <Authorizing>
                    <div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
                        <div class="text-center">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Checking authentication...</p>
                        </div>
                    </div>
                </Authorizing>
                <NotAuthorized>
                    @if (routeData.PageType?.FullName?.Contains("Setup") == true)
                    {
                        <!-- Allow access to Setup page without authentication -->
                        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
                    }
                    else if (routeData.PageType?.FullName?.Contains("Login") == true)
                    {
                        <!-- Allow access to Login page without authentication -->
                        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
                    }
                    else if (routeData.PageType?.FullName?.Contains("ProcessAuth") == true)
                    {
                        <!-- Allow access to ProcessAuth page to handle Azure AD callback -->
                        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
                    }
                    else
                    {
                        <LayoutView Layout="typeof(Layout.MainLayout)">
                            <RedirectToLogin />
                        </LayoutView>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="routeData" Selector="h1" />
        </Found>
        <NotFound>
            <LayoutView Layout="typeof(Layout.MainLayout)">
                <p class="m-3">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Temporarily disabled API call to test routing
        // Check if this is first run and redirect to setup if needed
        try
        {
            var currentPath = Navigation.Uri;
            
            // Don't check if already on setup page
            if (!currentPath.Contains("/setup"))
            {
                // Temporarily disabled to test routing
                // var response = await Http.GetFromJsonAsync<FirstRunResponse>("api/auth/check-first-run");
                // if (response?.IsFirstRun == true)
                // {
                //     Navigation.NavigateTo("/setup");
                // }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking first run status");
            // If there's an error checking first run, let normal auth flow handle it
        }
    }

    private class FirstRunResponse
    {
        public bool IsFirstRun { get; set; }
    }
}