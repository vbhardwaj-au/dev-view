@using Microsoft.AspNetCore.Components.Authorization
@using Web.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ILogger<AuthStateHandler> Logger

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Wait a bit for authentication state to be restored
            await Task.Delay(200);
            
            // Get the current authentication state
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            
            var currentUri = Navigation.Uri;
            
            // If user is authenticated but on login page, redirect to dashboard
            if (isAuthenticated && currentUri.Contains("/login"))
            {
                // Extract return URL if present
                var returnUrl = "";
                if (currentUri.Contains("ReturnUrl="))
                {
                    var returnUrlStart = currentUri.IndexOf("ReturnUrl=") + 10;
                    var returnUrlEnd = currentUri.IndexOf("&", returnUrlStart);
                    if (returnUrlEnd == -1) returnUrlEnd = currentUri.Length;
                    returnUrl = Uri.UnescapeDataString(currentUri.Substring(returnUrlStart, returnUrlEnd - returnUrlStart));
                }
                
                var targetUrl = !string.IsNullOrEmpty(returnUrl) && returnUrl != "/" ? returnUrl : "/dashboard";
                Navigation.NavigateTo(targetUrl, forceLoad: false);
            }
            // If user is not authenticated and not on login/setup page, redirect to login
            else if (!isAuthenticated && !currentUri.Contains("/login") && !currentUri.Contains("/setup"))
            {
                Navigation.NavigateTo("/login", forceLoad: false);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling authentication state");
        }
    }
}
