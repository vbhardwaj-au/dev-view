@attribute [Authorize(Roles="Admin")]
@page "/admin/users"
@using System.Net.Http.Json
@using System.Linq
@inject HttpClient Http
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Web.Services

@rendermode InteractiveServer

<PageTitle>Admin - Git Contributors - DevView</PageTitle>

<style>
    .sortable {
        cursor: pointer;
        user-select: none;
        transition: background-color 0.2s ease;
    }
    
    .sortable:hover {
        background-color: rgba(0, 0, 0, 0.2) !important;
        color: #fff !important;
    }
    
    .sortable i {
        font-size: 0.8em;
        color: inherit;
    }
    
    .table-dark th {
        color: #fff;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="bi bi-people-fill me-2"></i>
                    Git Contributors Management
                </h1>
                <div>
                    <div class="d-flex align-items-center">
                        <span class="me-3">
                            <strong>Workspace:</strong> 
                            <span class="badge bg-primary fs-6">@WorkspaceService.SelectedWorkspace</span>
                        </span>
                        <button class="btn btn-success" @onclick="SyncUsers" disabled="@isSyncing">
                            @if (isSyncing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-arrow-repeat me-2"></i>
                            }
                            Sync Users
                        </button>
                    </div>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="card mb-3">
                <div class="card-body">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-4">
                            <label for="nameFilter" class="form-label">
                                <i class="bi bi-search me-1"></i>Filter by Name
                            </label>
                            <input type="text" class="form-control" id="nameFilter" 
                                   placeholder="Search by name or user ID..." 
                                   @bind="nameFilter" 
                                   @bind:event="oninput" 
                                   @onkeyup="@(() => ApplyFilters())" />
                        </div>
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showExcluded" 
                                       @bind="showOnlyExcluded" 
                                       @bind:after="ApplyFilters">
                                <label class="form-check-label" for="showExcluded">
                                    Show only excluded users
                                </label>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                <i class="bi bi-x-circle me-1"></i>Clear Filters
                            </button>
                        </div>
                        <div class="col-md-3 text-end">
                            <span class="text-muted">
                                Showing @filteredUsers?.Count() of @allUsers?.Count() users
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(messageType == "success" ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
                </div>
            }

            @if (users == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading users...</p>
                </div>
            }
            else if (!users.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    No users found for workspace <strong>@WorkspaceService.SelectedWorkspace</strong>. Try syncing users first.
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-table me-2"></i>
                            Users - Workspace: @WorkspaceService.SelectedWorkspace
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Avatar</th>
                                        <th class="sortable" @onclick="@(() => SortBy("DisplayName"))">
                                            Display Name
                                            @if (sortColumn == "DisplayName")
                                            {
                                                <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("BitbucketUserId"))">
                                            Bitbucket User ID
                                            @if (sortColumn == "BitbucketUserId")
                                            {
                                                <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("CreatedOn"))">
                                            Created On
                                            @if (sortColumn == "CreatedOn")
                                            {
                                                <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("ExcludeFromReporting"))">
                                            Exclude from Reporting
                                            @if (sortColumn == "ExcludeFromReporting")
                                            {
                                                <i class="bi @(sortAscending ? "bi-arrow-up" : "bi-arrow-down") ms-1"></i>
                                            }
                                        </th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (filteredUsers != null)
                                    {
                                        @foreach (var user in filteredUsers)
                                    {
                                        <tr>
                                            <td>
                                                @if (!string.IsNullOrEmpty(user.AvatarUrl))
                                                {
                                                    <img src="@user.AvatarUrl" alt="Avatar" class="rounded-circle" style="width: 40px; height: 40px;" />
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                        <i class="bi bi-person-fill text-white"></i>
                                                    </div>
                                                }
                                            </td>
                                            <td>
                                                <strong>@user.DisplayName</strong>
                                            </td>
                                            <td>
                                                <code>@user.BitbucketUserId</code>
                                            </td>
                                            <td>
                                                @(user.CreatedOn?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")
                                            </td>
                                            <td class="text-center">
                                                <input type="checkbox" class="form-check-input" 
                                                       checked="@user.ExcludeFromReporting" 
                                                       @onchange="async e => await UpdateUserFlag(user, (bool)e.Value!)" 
                                                       title="@(user.ExcludeFromReporting ? "User is excluded from reports" : "User is included in reports")" />
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewUserActivity(user)">
                                                    <i class="bi bi-graph-up"></i> Activity
                                                </button>
                                            </td>
                                        </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<UserDto>? allUsers;
    private IEnumerable<UserDto>? filteredUsers;
    private bool isSyncing = false;
    private string message = "";
    private string messageType = "";
    
    // Filter variables
    private string nameFilter = "";
    private bool showOnlyExcluded = false;
    
    // Sort variables
    private string sortColumn = "DisplayName";
    private bool sortAscending = true;

    // Backward compatibility
    private IEnumerable<UserDto>? users => filteredUsers;

    protected override async Task OnInitializedAsync()
    {
        // Check if workspace is selected, redirect to Settings if not
        if (!WorkspaceService.HasSelectedWorkspace)
        {
            Navigation.NavigateTo("/admin/settings");
            return;
        }
        
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            // Use the /all endpoint to get all users including those excluded from reporting
            allUsers = await Http.GetFromJsonAsync<IEnumerable<UserDto>>("api/analytics/users/all");
            ApplyFilters();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading users: {ex.Message}", "error");
        }
    }

    private void ApplyFilters()
    {
        if (allUsers == null)
        {
            filteredUsers = null;
            return;
        }

        var query = allUsers.AsEnumerable();

        // Apply name filter
        if (!string.IsNullOrWhiteSpace(nameFilter))
        {
            var filter = nameFilter.ToLower();
            query = query.Where(u => 
                u.DisplayName.ToLower().Contains(filter) || 
                u.BitbucketUserId.ToLower().Contains(filter));
        }

        // Apply excluded filter
        if (showOnlyExcluded)
        {
            query = query.Where(u => u.ExcludeFromReporting);
        }

        // Apply sorting
        query = sortColumn switch
        {
            "DisplayName" => sortAscending ? query.OrderBy(u => u.DisplayName) : query.OrderByDescending(u => u.DisplayName),
            "BitbucketUserId" => sortAscending ? query.OrderBy(u => u.BitbucketUserId) : query.OrderByDescending(u => u.BitbucketUserId),
            "CreatedOn" => sortAscending ? query.OrderBy(u => u.CreatedOn) : query.OrderByDescending(u => u.CreatedOn),
            "ExcludeFromReporting" => sortAscending ? query.OrderBy(u => u.ExcludeFromReporting) : query.OrderByDescending(u => u.ExcludeFromReporting),
            _ => query.OrderBy(u => u.DisplayName)
        };

        filteredUsers = query.ToList();
        StateHasChanged();
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        ApplyFilters();
    }

    private void ClearFilters()
    {
        nameFilter = "";
        showOnlyExcluded = false;
        ApplyFilters();
    }

    private async Task SyncUsers()
    {
        if (!WorkspaceService.HasSelectedWorkspace)
        {
            ShowMessage("No workspace selected. Please configure workspace in Settings.", "error");
            return;
        }

        isSyncing = true;
        message = "";

        try
        {
            var response = await Http.PostAsync($"api/sync/users/{WorkspaceService.SelectedWorkspace}", null);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                ShowMessage(responseContent, "success");
                await LoadUsers(); // Refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowMessage($"Sync failed: {errorContent}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error during sync: {ex.Message}", "error");
        }
        finally
        {
            isSyncing = false;
        }
    }

    private void ShowMessage(string msg, string type)
    {
        message = msg;
        messageType = type;
    }

    private void ViewUserActivity(UserDto user)
    {
        // TODO: Navigate to user activity view or show modal with user stats
        ShowMessage($"User activity view for {user.DisplayName} - Feature coming soon!", "success");
    }

    private async Task UpdateUserFlag(UserDto user, bool excludeFromReporting)
    {
        try
        {
            var response = await Http.PostAsync($"api/analytics/users/{user.Id}/flags?excludeFromReporting={excludeFromReporting}", null);
            
            if (response.IsSuccessStatusCode)
            {
                user.ExcludeFromReporting = excludeFromReporting;
                var status = excludeFromReporting ? "excluded from" : "included in";
                ShowMessage($"{user.DisplayName} has been {status} reporting", "success");
                // Update the allUsers collection as well
                var userInAll = allUsers?.FirstOrDefault(u => u.Id == user.Id);
                if (userInAll != null)
                {
                    userInAll.ExcludeFromReporting = excludeFromReporting;
                }
            }
            else
            {
                ShowMessage($"Failed to update reporting flag for {user.DisplayName}", "error");
                await LoadUsers(); // Reload to get correct state
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error updating user flag: {ex.Message}", "error");
            await LoadUsers(); // Reload to get correct state
        }
    }
} 