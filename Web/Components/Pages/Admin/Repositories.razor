@attribute [Authorize(Roles="Admin")]
@page "/admin/repositories"
@using Web.Services
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Admin - Repositories - DevView</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="bi bi-folder-fill me-2"></i>
                    Repositories Management
                </h1>
                <div>
                    <div class="d-flex align-items-center">
                        <span class="me-3">
                            <strong>Workspace:</strong> 
                            <span class="badge bg-primary fs-6">@(WorkspaceService.SelectedWorkspace ?? "None Selected")</span>
                        </span>
                        <input type="text" class="form-control d-inline-block me-2" style="width: 200px;" 
                               @bind="workspaceForSync" placeholder="Workspace name" />
                        <button class="btn btn-success" @onclick="SyncRepositories" disabled="@isSyncing">
                            @if (isSyncing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-arrow-repeat me-2"></i>
                            }
                            Sync Repositories
                        </button>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="workspaceSelect" class="form-label fw-bold">Select Workspace</label>
                <select id="workspaceSelect" class="form-select" @onchange="OnWorkspaceChanged" value="@selectedWorkspace">
                    @foreach (var ws in allWorkspaces)
                    {
                        <option value="@ws">@ws</option>
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(messageType == "success" ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
                </div>
            }

            @if (repositories == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading repositories...</p>
                </div>
            }
            else if (!repositories.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    @if (WorkspaceService.HasSelectedWorkspace)
                    {
                        <span>No repositories found for workspace <strong>@WorkspaceService.SelectedWorkspace</strong>. Try syncing repositories first.</span>
                    }
                    else
                    {
                        <span>No workspace selected. Please configure workspace in Settings, then sync repositories.</span>
                    }
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-table me-2"></i>
                            Repositories (@repositories.Count()) - Workspace: @(WorkspaceService.SelectedWorkspace ?? "All")
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Slug</th>
                                        <th>Workspace</th>
                                        <th>Last Delta Sync</th>
                                        <th>Oldest Commit Date</th>
                                        <th>Exclude From Sync</th>
                                        <th>Exclude From Reporting</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var repo in filteredRepositories)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@repo.Name</strong>
                                            </td>
                                            <td>
                                                <code>@repo.Slug</code>
                                            </td>
                                            <td>
                                                <span class="badge bg-primary">@repo.Workspace</span>
                                            </td>
                                            <td>
                                                @if (repo.LastDeltaSyncDate.HasValue)
                                                {
                                                    <span class="text-success">@repo.LastDeltaSyncDate.Value.ToString("yyyy-MM-dd HH:mm")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Never synced</span>
                                                }
                                            </td>
                                            <td>
                                                @if (repo.OldestCommitDate.HasValue)
                                                {
                                                    @repo.OldestCommitDate.Value.ToString("yyyy-MM-dd")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No commits</span>
                                                }
                                            </td>
                                            <td>
                                                <input type="checkbox" class="form-check-input" checked="@repo.ExcludeFromSync" @onchange="async e => await UpdateFlag(repo, nameof(repo.ExcludeFromSync), (bool)e.Value)" />
                                            </td>
                                            <td>
                                                <input type="checkbox" class="form-check-input" checked="@repo.ExcludeFromReporting" @onchange="async e => await UpdateFlag(repo, nameof(repo.ExcludeFromReporting), (bool)e.Value)" />
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => NavigateToCommits(repo)">
                                                    <i class="bi bi-clock-history"></i> Commits
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => NavigateToPRs(repo)">
                                                    <i class="bi bi-git"></i> Pull Requests
                                                </button>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewRepository(repo)">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<RepositorySummaryDto>? repositories;
    private IEnumerable<RepositorySummaryDto> filteredRepositories => 
        repositories?.Where(r => string.IsNullOrEmpty(selectedWorkspace) || r.Workspace == selectedWorkspace) ?? Enumerable.Empty<RepositorySummaryDto>();
    private string workspaceForSync = "";
    private bool isSyncing = false;
    private string message = "";
    private string messageType = "";
    private string selectedWorkspace = string.Empty;
    private List<string> allWorkspaces = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRepositories();
        allWorkspaces = repositories?.Select(r => r.Workspace).Distinct().OrderBy(w => w).ToList() ?? new List<string>();
        if (string.IsNullOrEmpty(WorkspaceService.SelectedWorkspace) && allWorkspaces.Any())
        {
            selectedWorkspace = allWorkspaces.First();
            WorkspaceService.SelectedWorkspace = selectedWorkspace;
        }
        else
        {
            selectedWorkspace = WorkspaceService.SelectedWorkspace ?? string.Empty;
        }
    }

    private async Task LoadRepositories()
    {
        try
        {
            repositories = await Http.GetFromJsonAsync<IEnumerable<RepositorySummaryDto>>("api/analytics/repositories");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading repositories: {ex.Message}", "error");
        }
    }

    private async Task SyncRepositories()
    {
        if (string.IsNullOrWhiteSpace(workspaceForSync))
        {
            ShowMessage("Please enter a workspace name", "error");
            return;
        }

        isSyncing = true;
        message = "";

        try
        {
            var response = await Http.PostAsync($"api/sync/repositories/{workspaceForSync}", null);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                ShowMessage(responseContent, "success");
                await LoadRepositories(); // Refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowMessage($"Sync failed: {errorContent}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error during sync: {ex.Message}", "error");
        }
        finally
        {
            isSyncing = false;
        }
    }

    private async Task UpdateFlag(RepositorySummaryDto repo, string flagName, bool value)
    {
        try
        {
            var query = flagName == nameof(repo.ExcludeFromSync)
                ? $"excludeFromSync={value.ToString().ToLower()}"
                : $"excludeFromReporting={value.ToString().ToLower()}";
            var response = await Http.PostAsync($"/api/analytics/repositories/{repo.Id}/flags?{query}", null);
            if (!response.IsSuccessStatusCode)
            {
                ShowMessage($"Failed to update {flagName} for {repo.Name}", "error");
                await LoadRepositories();
                return;
            }
            await LoadRepositories();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error updating flag: {ex.Message}", "error");
        }
    }

    private void ShowMessage(string msg, string type)
    {
        message = msg;
        messageType = type;
    }

    private async Task ViewRepository(RepositorySummaryDto repo)
    {
        // Navigate to dashboard with the repository selected
        await JSRuntime.InvokeVoidAsync("open", $"/dashboard?repo={repo.Slug}", "_blank");
    }

    private void NavigateToCommits(RepositorySummaryDto repo)
    {
        Navigation.NavigateTo($"/repositories/{repo.Slug}/commits");
    }

    private void NavigateToPRs(RepositorySummaryDto repo)
    {
        Navigation.NavigateTo($"/repositories/{repo.Slug}/pullrequests");
    }

    private async Task OnWorkspaceChanged(ChangeEventArgs e)
    {
        selectedWorkspace = e.Value?.ToString() ?? string.Empty;
        WorkspaceService.SelectedWorkspace = selectedWorkspace;
        await LoadRepositories();
        StateHasChanged();
    }
} 