@page "/admin/roles"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Web.Services
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Role Management</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h3>Role Management</h3>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i> Create New Role
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (roles != null && roles.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>User Count</th>
                        <th>Created On</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var role in roles)
                    {
                        <tr>
                            <td>
                                <strong>@role.Name</strong>
                                @if (role.Name == "Admin")
                                {
                                    <span class="badge bg-danger ms-2">System</span>
                                }
                            </td>
                            <td>@role.Description</td>
                            <td>
                                <span class="badge bg-secondary">@role.UserCount users</span>
                            </td>
                            <td>@role.CreatedOn.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(role)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                @if (role.Name != "Admin")
                                {
                                    <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => ConfirmDelete(role)" 
                                            disabled="@(role.UserCount > 0)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                    @if (role.UserCount > 0)
                                    {
                                        <small class="text-muted d-block">Cannot delete - has users</small>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No roles found. Create your first role to get started.
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle"></i> @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit Role" : "Create New Role")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="roleName" class="form-label">Role Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="roleName" @bind="modalRole.Name" 
                               disabled="@(isEditMode && modalRole.Name == "Admin")" />
                        @if (isEditMode && modalRole.Name == "Admin")
                        {
                            <small class="text-muted">System role name cannot be changed</small>
                        }
                    </div>
                    <div class="mb-3">
                        <label for="roleDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="roleDescription" rows="3" @bind="modalRole.Description"></textarea>
                    </div>
                    @if (isEditMode && modalRole.UserCount > 0)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> This role is assigned to @modalRole.UserCount user(s)
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveRole" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(isEditMode ? "Update" : "Create") Role
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the role <strong>@roleToDelete?.Name</strong>?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteModal = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteRole" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Delete Role
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<RoleDto>? roles;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private RoleDto modalRole = new();
    
    private bool showDeleteModal = false;
    private bool isDeleting = false;
    private RoleDto? roleToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            var response = await Http.GetAsync("api/roles");
            
            if (response.IsSuccessStatusCode)
            {
                roles = await response.Content.ReadFromJsonAsync<List<RoleDto>>();
            }
            else
            {
                errorMessage = $"Failed to load roles: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading roles: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        modalRole = new RoleDto();
        isEditMode = false;
        showModal = true;
    }

    private void ShowEditModal(RoleDto role)
    {
        modalRole = new RoleDto
        {
            Id = role.Id,
            Name = role.Name,
            Description = role.Description,
            UserCount = role.UserCount
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        modalRole = new();
    }

    private async Task SaveRole()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(modalRole.Name))
            {
                errorMessage = "Role name is required";
                return;
            }

            isSaving = true;
            errorMessage = string.Empty;
            
            HttpResponseMessage response;
            
            if (isEditMode)
            {
                var updateRequest = new
                {
                    Name = modalRole.Name,
                    Description = modalRole.Description
                };
                response = await Http.PutAsJsonAsync($"api/roles/{modalRole.Id}", updateRequest);
            }
            else
            {
                var createRequest = new
                {
                    Name = modalRole.Name,
                    Description = modalRole.Description
                };
                response = await Http.PostAsJsonAsync("api/roles", createRequest);
            }
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = isEditMode ? "Role updated successfully" : "Role created successfully";
                CloseModal();
                await LoadRoles();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                errorMessage = "A role with this name already exists";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = content;
            }
            else
            {
                errorMessage = $"Failed to save role: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving role: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ConfirmDelete(RoleDto role)
    {
        roleToDelete = role;
        showDeleteModal = true;
    }

    private async Task DeleteRole()
    {
        if (roleToDelete == null) return;
        
        try
        {
            isDeleting = true;
            errorMessage = string.Empty;
            
            var response = await Http.DeleteAsync($"api/roles/{roleToDelete.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Role '{roleToDelete.Name}' deleted successfully";
                showDeleteModal = false;
                roleToDelete = null;
                await LoadRoles();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = content;
                showDeleteModal = false;
            }
            else
            {
                errorMessage = $"Failed to delete role: {response.StatusCode}";
                showDeleteModal = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting role: {ex.Message}";
            showDeleteModal = false;
        }
        finally
        {
            isDeleting = false;
        }
    }

    public class RoleDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public DateTime CreatedOn { get; set; }
        public int UserCount { get; set; }
    }
}