@page "/admin/pullrequests"
@using Web.Services
@using System.Net.Http.Json
@using Radzen
@using Radzen.Blazor

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Admin - Pull Requests - DevView</PageTitle>

@code {
    [Parameter]
    public string RepoSlug { get; set; } = string.Empty;
    private List<PullRequestListItemDto> pullRequests = new();
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 25;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadPullRequests();
    }

    private async Task LoadPullRequests()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var response = await Http.GetFromJsonAsync<PaginatedPullRequestsResponse>($"/api/pullrequests/{RepoSlug}?page={currentPage}&pageSize={pageSize}");
            if (response != null)
            {
                pullRequests = response.PullRequests;
                totalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading pull requests: {ex.Message}";
        }
        isLoading = false;
    }

    private void GoToPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        _ = LoadPullRequests();
    }
}

<h3>Pull Requests for @RepoSlug</h3>
@if (isLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (pullRequests.Count == 0)
{
    <div class="alert alert-info">No pull requests found for this repository.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>State</th>
                    <th>Created</th>
                    <th>Updated</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pr in pullRequests)
                {
                    <tr>
                        <td>@pr.Id</td>
                        <td>@pr.Title</td>
                        <td>@pr.AuthorName</td>
                        <td>
                            <span class="badge @(pr.State == "MERGED" ? "bg-success" : pr.State == "OPEN" ? "bg-primary" : "bg-secondary")">
                                @pr.State
                            </span>
                        </td>
                        <td>@pr.CreatedOn.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@pr.UpdatedOn?.ToString("yyyy-MM-dd HH:mm")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : null)">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : null)">
                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    public class PullRequestListItemDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string AuthorName { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public DateTime CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
    }
    public class PaginatedPullRequestsResponse
    {
        public List<PullRequestListItemDto> PullRequests { get; set; } = new();
        public int TotalPages { get; set; }
    }
} 