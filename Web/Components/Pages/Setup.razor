@page "/setup"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Web.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Initial Setup - DevView</PageTitle>

<style>
    .setup-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }
    
    .setup-card {
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        max-width: 500px;
        width: 100%;
    }
    
    .setup-header {
        text-align: center;
        margin-bottom: 40px;
    }
    
    .setup-logo {
        width: 80px;
        height: 80px;
        margin: 0 auto 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 36px;
        font-weight: bold;
    }
    
    .setup-title {
        color: #333;
        font-size: 28px;
        font-weight: 700;
        margin-bottom: 10px;
    }
    
    .setup-subtitle {
        color: #666;
        font-size: 16px;
    }
    
    .form-floating {
        margin-bottom: 20px;
    }
    
    .password-requirements {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }
    
    .requirement {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
        font-size: 14px;
        color: #666;
    }
    
    .requirement.met {
        color: #28a745;
    }
    
    .requirement i {
        margin-right: 8px;
        width: 20px;
    }
    
    .btn-setup {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        padding: 12px 30px;
        font-size: 16px;
        font-weight: 600;
        border-radius: 8px;
        width: 100%;
        transition: transform 0.2s;
    }
    
    .btn-setup:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
    }
    
    .btn-setup:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2em;
    }
</style>

<div class="setup-container">
    <div class="setup-card">
        <div class="setup-header">
            <div class="setup-logo">
                <i class="bi bi-graph-up"></i>
            </div>
            <h1 class="setup-title">Welcome to DevView</h1>
            <p class="setup-subtitle">Let's create your administrator account</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }

        @if (isCheckingFirstRun)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Checking system status...</span>
                </div>
                <p class="mt-3 text-muted">Checking system status...</p>
            </div>
        }
        else if (!isFirstRun)
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle-fill me-2"></i>
                <strong>Setup Already Complete</strong>
                <p class="mb-2">An administrator account already exists in the system.</p>
                <a href="/login" class="btn btn-primary btn-sm">
                    <i class="bi bi-box-arrow-in-right me-2"></i>Go to Login
                </a>
            </div>
        }
        else
        {
            <EditForm Model="@model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                
                <div class="form-floating">
                    <InputText @bind-Value="model.Username" class="form-control" id="username" 
                               placeholder="Username" required />
                    <label for="username">
                        <i class="bi bi-person-fill me-2"></i>Username
                    </label>
                    <ValidationMessage For="@(() => model.Username)" />
                </div>

                <div class="form-floating">
                    <InputText @bind-Value="model.DisplayName" class="form-control" id="displayName" 
                               placeholder="Display Name" />
                    <label for="displayName">
                        <i class="bi bi-badge-fill me-2"></i>Display Name (Optional)
                    </label>
                </div>

                <div class="form-floating">
                    <input type="password" class="form-control" id="password" 
                           placeholder="Password" required
                           value="@model.Password"
                           @oninput="@((e) => OnPasswordChanged(e.Value?.ToString() ?? string.Empty))" />
                    <label for="password">
                        <i class="bi bi-lock-fill me-2"></i>Password
                    </label>
                    <ValidationMessage For="@(() => model.Password)" />
                </div>

                <div class="form-floating">
                    <input type="password" class="form-control" id="confirmPassword" 
                           placeholder="Confirm Password" required
                           value="@model.ConfirmPassword"
                           @oninput="@((e) => OnConfirmPasswordChanged(e.Value?.ToString() ?? string.Empty))" />
                    <label for="confirmPassword">
                        <i class="bi bi-lock-fill me-2"></i>Confirm Password
                    </label>
                    <ValidationMessage For="@(() => model.ConfirmPassword)" />
                </div>

                <div class="password-requirements">
                    <h6 class="mb-3">Password Requirements:</h6>
                    <div class="requirement @(HasMinLength ? "met" : "")">
                        <i class="bi @(HasMinLength ? "bi-check-circle-fill" : "bi-circle")"></i>
                        At least 8 characters
                    </div>
                    <div class="requirement @(HasUpperCase ? "met" : "")">
                        <i class="bi @(HasUpperCase ? "bi-check-circle-fill" : "bi-circle")"></i>
                        One uppercase letter
                    </div>
                    <div class="requirement @(HasLowerCase ? "met" : "")">
                        <i class="bi @(HasLowerCase ? "bi-check-circle-fill" : "bi-circle")"></i>
                        One lowercase letter
                    </div>
                    <div class="requirement @(HasDigit ? "met" : "")">
                        <i class="bi @(HasDigit ? "bi-check-circle-fill" : "bi-circle")"></i>
                        One number
                    </div>
                    <div class="requirement @(HasSpecialChar ? "met" : "")">
                        <i class="bi @(HasSpecialChar ? "bi-check-circle-fill" : "bi-circle")"></i>
                        One special character
                    </div>
                </div>

                <button type="submit" class="btn btn-setup" disabled="@(!IsFormValid || isSubmitting)">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Creating Account...</span>
                    }
                    else
                    {
                        <i class="bi bi-person-plus-fill me-2"></i>
                        <span>Create Administrator Account</span>
                    }
                </button>
            </EditForm>
        }

        <div class="text-center mt-4">
            <small class="text-muted">
                <i class="bi bi-shield-check me-1"></i>
                This account will have full administrative privileges
            </small>
        </div>
    </div>
</div>

@code {
    private SetupModel model = new();
    private bool isSubmitting = false;
    private bool isCheckingFirstRun = true;
    private bool isFirstRun = true;
    private string? errorMessage;

    private bool HasMinLength => model.Password?.Length >= 8;
    private bool HasUpperCase => !string.IsNullOrEmpty(model.Password) && model.Password.Any(char.IsUpper);
    private bool HasLowerCase => !string.IsNullOrEmpty(model.Password) && model.Password.Any(char.IsLower);
    private bool HasDigit => !string.IsNullOrEmpty(model.Password) && model.Password.Any(char.IsDigit);
    private bool HasSpecialChar => !string.IsNullOrEmpty(model.Password) && model.Password.Any(c => !char.IsLetterOrDigit(c));
    
    private bool IsPasswordValid => HasMinLength && HasUpperCase && HasLowerCase && HasDigit && HasSpecialChar;
    private bool PasswordsMatch => model.Password == model.ConfirmPassword && !string.IsNullOrEmpty(model.Password);
    private bool IsFormValid => !string.IsNullOrWhiteSpace(model.Username) && IsPasswordValid && PasswordsMatch;

    protected override async Task OnInitializedAsync()
    {
        await CheckFirstRun();
    }

    private async Task CheckFirstRun()
    {
        try
        {
            isCheckingFirstRun = true;
            var response = await Http.GetFromJsonAsync<FirstRunResponse>("api/auth/check-first-run");
            isFirstRun = response?.IsFirstRun ?? false;
            
            if (!isFirstRun)
            {
                // If not first run, redirect to login after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to check system status: {ex.Message}";
        }
        finally
        {
            isCheckingFirstRun = false;
        }
    }

    private void OnPasswordChanged(string value)
    {
        model.Password = value;
        StateHasChanged();
    }

    private void OnConfirmPasswordChanged(string value)
    {
        model.ConfirmPassword = value;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid)
        {
            errorMessage = "Please fill all required fields correctly";
            return;
        }

        isSubmitting = true;
        errorMessage = null;

        try
        {
            var request = new
            {
                Username = model.Username,
                Password = model.Password,
                DisplayName = string.IsNullOrWhiteSpace(model.DisplayName) ? model.Username : model.DisplayName
            };

            var response = await Http.PostAsJsonAsync("api/auth/setup-admin", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null)
                {
                    // Store the token and redirect to dashboard
                    await AuthService.Login(result.Token, result.DisplayName, result.Roles);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    Navigation.NavigateTo("/", true);
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = string.IsNullOrEmpty(error) ? "Failed to create administrator account" : error;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class SetupModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        public string? DisplayName { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private class FirstRunResponse
    {
        public bool IsFirstRun { get; set; }
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string[] Roles { get; set; } = Array.Empty<string>();
    }
}