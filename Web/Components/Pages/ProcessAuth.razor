@page "/process-auth"
@using Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IHybridAuthService HybridAuth
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ILogger<ProcessAuth> Logger
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

<div class="container mt-5 text-center">
    <h3>Processing authentication...</h3>
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-3">@statusMessage</p>
</div>

@code {
    private string statusMessage = "Please wait while we complete your sign-in.";
    private static bool isProcessing = false; // Static to prevent re-entry
    private bool hasNavigated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isProcessing && !hasNavigated)
        {
            isProcessing = true;
            try
            {
                await ProcessAuthentication();
            }
            finally
            {
                isProcessing = false;
            }
        }
    }

    private async Task ProcessAuthentication()
    {
        try
        {
            Logger.LogInformation("[ProcessAuth] Starting authentication processing");
            statusMessage = "Verifying your identity...";
            StateHasChanged();

            // First check if we already have a JWT token (already authenticated)
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user?.Identity?.IsAuthenticated == true &&
                (user.Identity.AuthenticationType == "JwtAuth" || user.Claims.Any(c => c.Type == ClaimTypes.Role)))
            {
                Logger.LogInformation("[ProcessAuth] User already authenticated with JWT, redirecting to dashboard");
                hasNavigated = true;
                await JS.InvokeVoidAsync("eval", "window.location.href = '/dashboard'");
                return;
            }

            // Check the HTTP context for Azure AD cookie authentication
            var httpContext = HttpContextAccessor.HttpContext;
            var cookieUser = httpContext?.User;

            Logger.LogInformation("[ProcessAuth] Checking for Azure AD cookie authentication");
            Logger.LogInformation("[ProcessAuth] Cookie user authenticated: {Auth}", cookieUser?.Identity?.IsAuthenticated);

            if (cookieUser?.Identity?.IsAuthenticated == true)
            {
                Logger.LogInformation("[ProcessAuth] Azure AD cookie authentication detected for user: {Name}",
                    cookieUser.Identity.Name ?? cookieUser.FindFirst("preferred_username")?.Value);
                statusMessage = "Processing your Azure AD authentication...";
                StateHasChanged();

                // Process the Azure AD user through the hybrid auth service
                var result = await HybridAuth.HandleAzureCallbackAsync(cookieUser);

                if (result.Success)
                {
                    Logger.LogInformation("[ProcessAuth] Authentication successful, token generated");
                    statusMessage = "Success! Redirecting to dashboard...";
                    StateHasChanged();

                    await Task.Delay(500);
                    hasNavigated = true;
                    await JS.InvokeVoidAsync("eval", "window.location.href = '/dashboard'");
                }
                else
                {
                    Logger.LogWarning("[ProcessAuth] Authentication failed - {Error}", result.ErrorMessage);
                    statusMessage = $"Authentication failed: {result.ErrorMessage}";
                    StateHasChanged();

                    await Task.Delay(2000);
                    hasNavigated = true;
                    var errorParam = Uri.EscapeDataString(result.ErrorMessage ?? "Authentication failed");
                    await JS.InvokeVoidAsync("eval", $"window.location.href = '/login?error={errorParam}'");
                }
            }
            else
            {
                Logger.LogWarning("[ProcessAuth] No authenticated user found");
                statusMessage = "No authenticated user found. Redirecting to login...";
                StateHasChanged();

                await Task.Delay(1000);
                hasNavigated = true;
                await JS.InvokeVoidAsync("eval", "window.location.href = '/login?error=notauthenticated'");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[ProcessAuth] Error processing authentication");
            statusMessage = $"Error: {ex.Message}";
            StateHasChanged();

            await Task.Delay(2000);
            hasNavigated = true;
            await JS.InvokeVoidAsync("eval", "window.location.href = '/login?error=callback'");
        }
    }
}