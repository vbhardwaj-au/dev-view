@attribute [Authorize]
@page "/teams"
@using System.Net.Http.Json
@using Entities.DTOs.Teams
@using Entities.DTOs.Analytics
@using System.Text.Json
@using System.Threading
@inject HttpClient Http
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Web.Services
@implements IDisposable

@rendermode InteractiveServer

<PageTitle>Admin - Teams - DevView</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="bi bi-collection me-2"></i>
                    Teams Management
                </h1>
                <div>
                    <div class="d-flex align-items-center">
                        <span class="me-3">
                            <strong>Workspace:</strong> 
                            <span class="badge bg-primary fs-6">@WorkspaceService.SelectedWorkspace</span>
                        </span>
                        <button class="btn btn-success" @onclick="ShowCreateTeamModal">
                            <i class="bi bi-plus-circle me-2"></i>
                            Create Team
                        </button>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(messageType == "success" ? "alert-success" : messageType == "warning" ? "alert-warning" : "alert-danger") alert-dismissible fade show" role="alert">
                    @((MarkupString)message)
                    <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
                </div>
            }

            @if (teams == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading teams...</p>
                </div>
            }
            else if (!teams.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    No teams found. Create your first team to get started.
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var team in teams)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">
                                        <i class="bi bi-collection me-2"></i>
                                        @team.Name
                                    </h5>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="bi bi-three-dots"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><button class="dropdown-item" type="button" @onclick="() => ShowTeamDetails(team.Id)">
                                                <i class="bi bi-eye me-2"></i>View Details
                                            </button></li>
                                            <li><button class="dropdown-item" type="button" @onclick="() => ShowEditTeamModal(team)">
                                                <i class="bi bi-pencil me-2"></i>Edit Team
                                            </button></li>
                                            <li><button class="dropdown-item" type="button" @onclick="() => ShowAddMembersModal(team.Id)">
                                                <i class="bi bi-person-plus me-2"></i>Add Members
                                            </button></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><button class="dropdown-item text-danger" type="button" @onclick="() => DeleteTeam(team.Id)">
                                                <i class="bi bi-trash me-2"></i>Delete Team
                                            </button></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        @(string.IsNullOrEmpty(team.Description) ? "No description provided" : team.Description)
                                    </p>
                                    <div class="mb-2">
                                        <strong>Members:</strong> 
                                        <span class="badge bg-secondary">@team.MemberCount</span>
                                    </div>
                                    <small class="text-muted">
                                        Created: @team.CreatedOn.ToString("MMM dd, yyyy")
                                    </small>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => ShowTeamDetails(team.Id)">
                                        <i class="bi bi-eye me-1"></i>View Members
                                    </button>
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => ShowAddMembersModal(team.Id)">
                                        <i class="bi bi-person-plus me-1"></i>Add Members
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Team Modal -->
<div class="modal fade" id="createTeamModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-plus-circle me-2"></i>Create New Team
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="teamName" class="form-label">Team Name <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="teamName" @bind="newTeam.Name" placeholder="Enter team name">
                </div>
                <div class="mb-3">
                    <label for="teamDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="teamDescription" rows="3" @bind="newTeam.Description" placeholder="Enter team description (optional)"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">Initial Team Members (optional)</label>
                    <div class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                        @if (availableUsers != null)
                        {
                            @foreach (var user in availableUsers)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           @onchange="(e) => ToggleUserSelection(user.Id, (bool)e.Value!)"
                                           id="user_@user.Id">
                                    <label class="form-check-label d-flex align-items-center" for="user_@user.Id">
                                        @if (!string.IsNullOrEmpty(user.AvatarUrl))
                                        {
                                            <img src="@user.AvatarUrl" alt="Avatar" class="rounded-circle me-2" style="width: 24px; height: 24px;" />
                                        }
                                        else
                                        {
                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                                                <i class="bi bi-person-fill text-white" style="font-size: 12px;"></i>
                                            </div>
                                        }
                                        @user.DisplayName
                                        @if (user.IsAlreadyMapped)
                                        {
                                            <small class="text-muted ms-auto">(@user.ExistingTeams)</small>
                                        }
                                    </label>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="CreateTeam" disabled="@isCreating">
                    @if (isCreating)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-plus-circle me-1"></i>Create Team
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Team Modal -->
<div class="modal fade" id="editTeamModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil me-2"></i>Edit Team
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="editTeamName" class="form-label">Team Name <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="editTeamName" @bind="editTeam.Name" placeholder="Enter team name">
                </div>
                <div class="mb-3">
                    <label for="editTeamDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="editTeamDescription" rows="3" @bind="editTeam.Description" placeholder="Enter team description (optional)"></textarea>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="editTeam.IsActive" id="editTeamActive">
                    <label class="form-check-label" for="editTeamActive">
                        Team is active
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="UpdateTeam" disabled="@isUpdating">
                    @if (isUpdating)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-check-circle me-1"></i>Update Team
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Members Modal -->
<div class="modal fade" id="addMembersModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-person-plus me-2"></i>Add Team Members
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" @onchange="OnIncludeAlreadyMappedChanged" checked="@includeAlreadyMapped" id="includeAlreadyMapped">
                    <label class="form-check-label" for="includeAlreadyMapped">
                        Include users already mapped to other teams
                    </label>
                </div>
                
                <div class="mb-3">
                    <label for="userSearch" class="form-label">Search Users</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" id="userSearch" @bind="userSearchText" @oninput="OnUserSearchChanged" placeholder="Search by name or username...">
                        @if (!string.IsNullOrEmpty(userSearchText))
                        {
                            <button class="btn btn-outline-secondary" type="button" @onclick="ClearUserSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        }
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">
                        Select Users to Add 
                        @if (availableUsersForAdd != null)
                        {
                            <span class="badge bg-info">@availableUsersForAdd.Count() users</span>
                        }
                    </label>
                    <div class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
                        @if (availableUsersForAdd != null)
                        {
                            @if (availableUsersForAdd.Any())
                            {
                                @foreach (var user in availableUsersForAdd)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" 
                                               @onchange="(e) => ToggleAddUserSelection(user.Id, (bool)e.Value!)"
                                               checked="@selectedAddUserIds.Contains(user.Id)"
                                               id="add_user_@user.Id">
                                        <label class="form-check-label d-flex align-items-center" for="add_user_@user.Id">
                                            @if (!string.IsNullOrEmpty(user.AvatarUrl))
                                            {
                                                <img src="@user.AvatarUrl" alt="Avatar" class="rounded-circle me-2" style="width: 24px; height: 24px;" />
                                            }
                                            else
                                            {
                                                <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                                                    <i class="bi bi-person-fill text-white" style="font-size: 12px;"></i>
                                                </div>
                                            }
                                            @user.DisplayName
                                            @if (user.IsAlreadyMapped)
                                            {
                                                <small class="text-warning ms-auto">
                                                    <i class="bi bi-exclamation-triangle me-1"></i>
                                                    Already in: @user.ExistingTeams
                                                </small>
                                            }
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center text-muted py-3">
                                    <i class="bi bi-person-x fs-1"></i>
                                    <p class="mt-2">
                                        @if (!string.IsNullOrEmpty(userSearchText))
                                        {
                                            <span>No users found matching "<strong>@userSearchText</strong>"</span>
                                        }
                                        else if (!includeAlreadyMapped)
                                        {
                                            <span>No available users found.<br/>Try checking "Include users already mapped to other teams" above.</span>
                                        }
                                        else
                                        {
                                            <span>No users available to add.</span>
                                        }
                                    </p>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2 text-muted">Loading users...</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="AddMembersToTeam" disabled="@isAddingMembers">
                    @if (isAddingMembers)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-person-plus me-1"></i>Add Selected Members
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Team Details Modal -->
<div class="modal fade" id="teamDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-collection me-2"></i>@(selectedTeam?.Name ?? "Team Details")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (selectedTeam != null)
                {
                    <div class="mb-3">
                        <strong>Description:</strong> @(string.IsNullOrEmpty(selectedTeam.Description) ? "No description provided" : selectedTeam.Description)
                    </div>
                    <div class="mb-3">
                        <strong>Created:</strong> @selectedTeam.CreatedOn.ToString("MMMM dd, yyyy 'at' HH:mm")
                    </div>
                    <div class="mb-3">
                        <strong>Members (@selectedTeam.Members.Count):</strong>
                    </div>
                    
                    @if (selectedTeam.Members.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Avatar</th>
                                        <th>Name</th>
                                        <th>Bitbucket ID</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var member in selectedTeam.Members)
                                    {
                                        <tr>
                                            <td>
                                                @if (!string.IsNullOrEmpty(member.AvatarUrl))
                                                {
                                                    <img src="@member.AvatarUrl" alt="Avatar" class="rounded-circle" style="width: 30px; height: 30px;" />
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 30px; height: 30px;">
                                                        <i class="bi bi-person-fill text-white" style="font-size: 14px;"></i>
                                                    </div>
                                                }
                                            </td>
                                            <td>@member.DisplayName</td>
                                            <td><code>@member.BitbucketUserId</code></td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => RemoveMemberFromTeam(selectedTeam.Id, member.Id)">
                                                    <i class="bi bi-person-dash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            No members in this team yet.
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="() => ShowAddMembersFromDetails(selectedTeam?.Id ?? 0)">
                    <i class="bi bi-person-plus me-1"></i>Add Members
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<TeamDto>? teams;
    private IEnumerable<AvailableUserDto>? availableUsers;
    private IEnumerable<AvailableUserDto>? availableUsersForAdd;
    private TeamDto? selectedTeam;
    
    private CreateTeamDto newTeam = new CreateTeamDto();
    private UpdateTeamDto editTeam = new UpdateTeamDto();
    private int editTeamId = 0;
    private int addMembersTeamId = 0;
    
    private HashSet<int> selectedUserIds = new HashSet<int>();
    private HashSet<int> selectedAddUserIds = new HashSet<int>();
    private bool includeAlreadyMapped = false;
    private string userSearchText = "";
    private Timer? searchTimer;
    
    private bool isCreating = false;
    private bool isUpdating = false;
    private bool isAddingMembers = false;
    private string message = "";
    private string messageType = "";

    protected override async Task OnInitializedAsync()
    {
        // Try to auto-select workspace if none is selected
        if (!WorkspaceService.HasSelectedWorkspace)
        {
            await WorkspaceService.TryAutoSelectWorkspaceAsync();
        }

        if (!WorkspaceService.HasSelectedWorkspace)
        {
            Navigation.NavigateTo("/admin/settings");
            return;
        }
        
        // Clean up any lingering modal backdrops from previous sessions
        await CleanupModalBackdrops();
        
        await LoadTeams();
        await LoadAvailableUsers();
    }

    private async Task CleanupModalBackdrops()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                try {
                    // Remove any leftover modal backdrops
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                    
                    // Ensure body classes are clean
                    document.body.classList.remove('modal-open');
                    document.body.style.removeProperty('padding-right');
                    
                    console.log('Modal backdrops cleaned up');
                } catch(e) { 
                    console.error('Backdrop cleanup error:', e); 
                }
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CleanupModalBackdrops: {ex.Message}");
        }
    }

    private async Task LoadTeams()
    {
        try
        {
            teams = await Http.GetFromJsonAsync<IEnumerable<TeamDto>>("api/teams");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading teams: {ex.Message}", "error");
        }
    }

    private async Task LoadAvailableUsers(int? teamId = null)
    {
        try
        {
            var url = teamId.HasValue 
                ? $"api/teams/available-users/{teamId}" 
                : "api/teams/available-users";
            availableUsers = await Http.GetFromJsonAsync<IEnumerable<AvailableUserDto>>(url);
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading users: {ex.Message}", "error");
        }
    }

    private async Task ShowCreateTeamModal()
    {
        newTeam = new CreateTeamDto();
        selectedUserIds.Clear();
        await LoadAvailableUsers();
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('createTeamModal')).show()");
        await JSRuntime.InvokeVoidAsync("eval", "setTimeout(() => document.getElementById('teamName').focus(), 500)");
    }

    private async Task ShowEditTeamModal(TeamDto team)
    {
        editTeamId = team.Id;
        editTeam = new UpdateTeamDto
        {
            Name = team.Name,
            Description = team.Description,
            IsActive = team.IsActive
        };
        StateHasChanged(); // Ensure UI updates before showing modal
        await Task.Delay(100); // Small delay to ensure DOM is ready
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('editTeamModal')).show()");
    }

    private async Task ShowAddMembersModal(int teamId)
    {
        addMembersTeamId = teamId;
        selectedAddUserIds.Clear();
        includeAlreadyMapped = false;
        userSearchText = "";
        searchTimer?.Dispose(); // Clear any pending search
        await LoadAvailableUsersForAdd(teamId);
        StateHasChanged();
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('addMembersModal')).show()");
    }

    private async Task LoadAvailableUsersForAdd(int teamId)
    {
        try
        {
            var url = $"api/teams/available-users/{teamId}?includeAlreadyMapped={includeAlreadyMapped}";
            
            if (!string.IsNullOrWhiteSpace(userSearchText))
            {
                url += $"&search={Uri.EscapeDataString(userSearchText)}";
            }
            
            availableUsersForAdd = await Http.GetFromJsonAsync<IEnumerable<AvailableUserDto>>(url);
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading available users: {ex.Message}", "error");
        }
    }

    private async Task ShowTeamDetails(int teamId)
    {
        try
        {
            selectedTeam = await Http.GetFromJsonAsync<TeamDto>($"api/teams/{teamId}");
            await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('teamDetailsModal')).show()");
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading team details: {ex.Message}", "error");
        }
    }

    private void ToggleUserSelection(int userId, bool selected)
    {
        if (selected)
            selectedUserIds.Add(userId);
        else
            selectedUserIds.Remove(userId);
    }

    private void ToggleAddUserSelection(int userId, bool selected)
    {
        if (selected)
            selectedAddUserIds.Add(userId);
        else
            selectedAddUserIds.Remove(userId);
    }

    private async Task CreateTeam()
    {
        if (string.IsNullOrWhiteSpace(newTeam.Name))
        {
            ShowMessage("Team name is required", "error");
            return;
        }

        isCreating = true;
        try
        {
            newTeam.UserIds = selectedUserIds.ToList();
            var response = await Http.PostAsJsonAsync("api/teams", newTeam);
            
            if (response.IsSuccessStatusCode)
            {
                ShowMessage("Team created successfully!", "success");
                await LoadTeams();
                await CloseModalAndCleanup("createTeamModal");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowMessage($"Error creating team: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error creating team: {ex.Message}", "error");
        }
        finally
        {
            isCreating = false;
        }
    }

    private async Task UpdateTeam()
    {
        if (string.IsNullOrWhiteSpace(editTeam.Name))
        {
            ShowMessage("Team name is required", "error");
            return;
        }

        isUpdating = true;
        try
        {
            // Add debugging info
            Console.WriteLine($"Updating team {editTeamId} with name: {editTeam.Name}");
            
            var response = await Http.PutAsJsonAsync($"api/teams/{editTeamId}", editTeam);
            
            Console.WriteLine($"Update response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                ShowMessage("Team updated successfully!", "success");
                await LoadTeams();
                StateHasChanged(); // Force UI update
                await Task.Delay(100); // Small delay before hiding modal
                await CloseModalAndCleanup("editTeamModal");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Update error: {error}");
                ShowMessage($"Error updating team: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Update exception: {ex.Message}");
            ShowMessage($"Error updating team: {ex.Message}", "error");
        }
        finally
        {
            isUpdating = false;
            StateHasChanged(); // Ensure UI updates
        }
    }

    private async Task AddMembersToTeam()
    {
        if (!selectedAddUserIds.Any())
        {
            ShowMessage("Please select at least one user to add", "warning");
            return;
        }

        isAddingMembers = true;
        try
        {
            var addMemberDto = new AddTeamMemberDto
            {
                UserIds = selectedAddUserIds.ToList(),
                IncludeAlreadyMapped = includeAlreadyMapped
            };

            var response = await Http.PostAsJsonAsync($"api/teams/{addMembersTeamId}/members", addMemberDto);
            
            if (response.IsSuccessStatusCode)
            {
                try 
                {
                    var result = await response.Content.ReadFromJsonAsync<AddTeamMembersResponseDto>();
                    
                    if (result != null)
                    {
                        Console.WriteLine($"Successfully added {result.AddedMembers} members. Warnings: {result.Warnings.Count}");
                        
                        var successMsg = $"Added {result.AddedMembers} member{(result.AddedMembers != 1 ? "s" : "")} successfully!";
                        if (result.Warnings.Any())
                        {
                            successMsg += "<br/><strong>Warnings:</strong><br/>" + string.Join("<br/>", result.Warnings);
                        }
                        
                        ShowMessage(successMsg, result.Warnings.Any() ? "warning" : "success");
                    }
                    else
                    {
                        // Fallback: count selected users as a backup
                        var fallbackCount = selectedAddUserIds.Count;
                        ShowMessage($"Added {fallbackCount} member{(fallbackCount != 1 ? "s" : "")} successfully!", "success");
                        Console.WriteLine("Response was null, using fallback count");
                    }
                }
                catch (Exception parseEx)
                {
                    Console.WriteLine($"Parse error: {parseEx.Message}");
                    // Fallback: count selected users as a backup
                    var fallbackCount = selectedAddUserIds.Count;
                    ShowMessage($"Added {fallbackCount} member{(fallbackCount != 1 ? "s" : "")} successfully!", "success");
                }
                
                await LoadTeams();
                StateHasChanged();
                await Task.Delay(100);
                await CloseModalAndCleanup("addMembersModal");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowMessage($"Error adding members: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error adding members: {ex.Message}", "error");
        }
        finally
        {
            isAddingMembers = false;
        }
    }

    private async Task RemoveMemberFromTeam(int teamId, int userId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/teams/{teamId}/members/{userId}");
            
            if (response.IsSuccessStatusCode)
            {
                ShowMessage("Member removed successfully!", "success");
                await RefreshTeamDetails(teamId); // Refresh team details without closing modal
                await LoadTeams(); // Refresh teams list
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowMessage($"Error removing member: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error removing member: {ex.Message}", "error");
        }
    }

    private async Task RefreshTeamDetails(int teamId)
    {
        try
        {
            // Refresh the selected team data without closing the modal
            selectedTeam = await Http.GetFromJsonAsync<TeamDto>($"api/teams/{teamId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error refreshing team details: {ex.Message}", "error");
        }
    }

    private async Task DeleteTeam(int teamId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this team? This action cannot be undone.");
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"api/teams/{teamId}");
            
            if (response.IsSuccessStatusCode)
            {
                ShowMessage("Team deleted successfully!", "success");
                await LoadTeams();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowMessage($"Error deleting team: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error deleting team: {ex.Message}", "error");
        }
    }

    private void ShowMessage(string msg, string type)
    {
        message = msg;
        messageType = type;
    }

    private async Task OnIncludeAlreadyMappedChanged(ChangeEventArgs e)
    {
        includeAlreadyMapped = (bool)(e.Value ?? false);
        selectedAddUserIds.Clear(); // Clear selections when changing filter
        await LoadAvailableUsersForAdd(addMembersTeamId);
        StateHasChanged();
    }

    private void OnUserSearchChanged(ChangeEventArgs e)
    {
        userSearchText = e.Value?.ToString() ?? "";
        
        // Debounce search - wait 300ms after user stops typing
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadAvailableUsersForAdd(addMembersTeamId);
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private async Task ClearUserSearch()
    {
        userSearchText = "";
        selectedAddUserIds.Clear();
        await LoadAvailableUsersForAdd(addMembersTeamId);
        StateHasChanged();
    }

    private async Task ShowAddMembersFromDetails(int teamId)
    {
        try
        {
            // First close the team details modal
            await JSRuntime.InvokeVoidAsync("eval", "try { const modal = bootstrap.Modal.getInstance(document.getElementById('teamDetailsModal')); if(modal) modal.hide(); } catch(e) { console.error('Details modal hide error:', e); }");
            
            // Wait for modal to close completely
            await Task.Delay(500);
            
            // Remove any lingering backdrops
            await JSRuntime.InvokeVoidAsync("eval", @"
                try {
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                    document.body.classList.remove('modal-open');
                    document.body.style.removeProperty('padding-right');
                } catch(e) { console.error('Backdrop cleanup error:', e); }
            ");
            
            // Now show add members modal
            await ShowAddMembersModal(teamId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ShowAddMembersFromDetails: {ex.Message}");
            ShowMessage($"Error opening add members modal: {ex.Message}", "error");
        }
    }

    private async Task CloseModalAndCleanup(string modalId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", $@"
                try {{
                    const modal = bootstrap.Modal.getInstance(document.getElementById('{modalId}'));
                    if(modal) {{
                        modal.hide();
                        
                        // Wait for modal to fully close then cleanup
                        setTimeout(() => {{
                            const backdrops = document.querySelectorAll('.modal-backdrop');
                            backdrops.forEach(backdrop => backdrop.remove());
                            document.body.classList.remove('modal-open');
                            document.body.style.removeProperty('padding-right');
                        }}, 300);
                    }}
                }} catch(e) {{ 
                    console.error('Modal cleanup error:', e); 
                    // Force cleanup if something goes wrong
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                    document.body.classList.remove('modal-open');
                    document.body.style.removeProperty('padding-right');
                }}
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CloseModalAndCleanup: {ex.Message}");
        }
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
        searchTimer = null;
    }

} 